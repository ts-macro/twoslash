{
  "code": "<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\n\n\n\n\n\nconst count = ref(0)\n\nconst double = computed(() => count.value * 2)\n</script>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      msg: 'Hello!'\n    }\n  },\n  methods: {\n    greet() {\n      console.log(this.msg)\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">{{ msg }} Count is: {{ count }}</button>\n</template>\n",
  "nodes": [
    {
      "type": "hover",
      "text": "(alias) function ref<T>(value: T): [T] extends [Ref] ? IfAny<T, Ref<T>, T> : Ref<UnwrapRef<T>, UnwrapRef<T> | T> (+1 overload)\nimport ref",
      "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
      "tags": [
        [
          "param",
          "value - The object to wrap in the ref."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#ref}"
        ]
      ],
      "start": 34,
      "length": 3,
      "target": "ref",
      "line": 1,
      "character": 9
    },
    {
      "type": "hover",
      "text": "(alias) const computed: {\n    <T>(getter: ComputedGetter<T>, debugOptions?: DebuggerOptions): ComputedRef<T>;\n    <T, S = T>(options: WritableComputedOptions<T, S>, debugOptions?: DebuggerOptions): WritableComputedRef<T, S>;\n}\nimport computed",
      "start": 39,
      "length": 8,
      "target": "computed",
      "line": 1,
      "character": 14
    },
    {
      "type": "query",
      "text": "(alias) const computed: {\n    <T>(getter: ComputedGetter<T>, debugOptions?: DebuggerOptions): ComputedRef<T>;\n    <T, S = T>(options: WritableComputedOptions<T, S>, debugOptions?: DebuggerOptions): WritableComputedRef<T, S>;\n}\nimport computed",
      "start": 39,
      "length": 8,
      "target": "computed",
      "line": 1,
      "character": 14
    },
    {
      "type": "hover",
      "text": "const count: Ref<number, number>",
      "start": 72,
      "length": 5,
      "target": "count",
      "line": 7,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(alias) ref<number>(value: number): Ref<number, number> (+1 overload)\nimport ref",
      "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
      "tags": [
        [
          "param",
          "value - The object to wrap in the ref."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#ref}"
        ]
      ],
      "start": 80,
      "length": 3,
      "target": "ref",
      "line": 7,
      "character": 14
    },
    {
      "type": "hover",
      "text": "const double: ComputedRef<number>",
      "start": 94,
      "length": 6,
      "target": "double",
      "line": 9,
      "character": 6
    },
    {
      "type": "query",
      "text": "const double: ComputedRef<number>",
      "start": 94,
      "length": 6,
      "target": "double",
      "line": 9,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(alias) computed<number>(getter: ComputedGetter<number>, debugOptions?: DebuggerOptions): ComputedRef<number> (+1 overload)\nimport computed",
      "docs": "Takes a getter function and returns a readonly reactive ref object for the\nreturned value from the getter. It can also take an object with get and set\nfunctions to create a writable ref object.",
      "tags": [
        [
          "example",
          "```js\n// Creating a readonly computed ref:\nconst count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\nconsole.log(plusOne.value) // 2\nplusOne.value++ // error\n```\n\n```js\n// Creating a writable computed ref:\nconst count = ref(1)\nconst plusOne = computed({\n  get: () => count.value + 1,\n  set: (val) => {\n    count.value = val - 1\n  }\n})\n\nplusOne.value = 1\nconsole.log(count.value) // 0\n```"
        ],
        [
          "param",
          "getter - Function that produces the next value."
        ],
        [
          "param",
          "debugOptions - For debugging. See {@link https://vuejs.org/guide/extras/reactivity-in-depth.html#computed-debugging}."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#computed}"
        ]
      ],
      "start": 103,
      "length": 8,
      "target": "computed",
      "line": 9,
      "character": 15
    },
    {
      "type": "hover",
      "text": "const count: Ref<number, number>",
      "start": 118,
      "length": 5,
      "target": "count",
      "line": 9,
      "character": 30
    },
    {
      "type": "hover",
      "text": "(property) Ref<number, number>.value: number",
      "start": 124,
      "length": 5,
      "target": "value",
      "line": 9,
      "character": 36
    },
    {
      "type": "hover",
      "text": "(property) ComponentOptionsBase<Props, RawBindings, D, C extends ComputedOptions, M extends MethodOptions, Mixin extends ComponentOptionsMixin, Extends extends ComponentOptionsMixin, E extends EmitsOptions, EE extends string = string, Defaults = {}, I extends ComponentInjectOptions = {}, II extends string = string, S extends SlotsType = {}, LC extends Record<string, Component> = {}, Directives extends Record<string, Directive> = {}, Exposed extends string = string, Provide extends ComponentProvideOptions = ComponentProvideOptions>.name?: string | undefined",
      "start": 174,
      "length": 4,
      "target": "name",
      "line": 14,
      "character": 2
    },
    {
      "type": "hover",
      "text": "(property) LegacyOptions<ToResolvedProps<{}, {}>, { msg: string; }, {}, { greet(): void; }, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, ComponentProvideOptions>.data?: ((this: CreateComponentPublicInstanceWithMixins<...>, vm: CreateComponentPublicInstanceWithMixins<ToResolvedProps<{}, {}>, {}, {}, {}, MethodOptions, ComponentOptionsMixin, ComponentOptionsMixin, ... 18 more ..., {}>) => {\n    ...;\n}) | undefined",
      "start": 196,
      "length": 4,
      "target": "data",
      "line": 15,
      "character": 2
    },
    {
      "type": "hover",
      "text": "(property) msg: string",
      "start": 224,
      "length": 3,
      "target": "msg",
      "line": 17,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(property) LegacyOptions<ToResolvedProps<{}, {}>, { msg: string; }, {}, { greet(): void; }, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, ComponentProvideOptions>.methods?: {\n    greet(): void;\n} | undefined",
      "start": 251,
      "length": 7,
      "target": "methods",
      "line": 20,
      "character": 2
    },
    {
      "type": "hover",
      "text": "(method) greet(): void",
      "start": 266,
      "length": 5,
      "target": "greet",
      "line": 21,
      "character": 4
    },
    {
      "type": "hover",
      "text": "namespace console\nvar console: Console",
      "docs": "The `console` module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdout) and\n[`process.stderr`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n\n_**Warning**_: The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v22.x/api/process.html#a-note-on-process-io) for\nmore information.\n\nExample using the global `console`:\n\n```js\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n```\n\nExample using the `Console` class:\n\n```js\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n```",
      "tags": [
        [
          "see",
          "[source](https://github.com/nodejs/node/blob/v22.x/lib/console.js)"
        ]
      ],
      "start": 282,
      "length": 7,
      "target": "console",
      "line": 22,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)",
      "docs": "Prints to `stdout` with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n(the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)).\n\n```js\nconst count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\n```\n\nSee [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args) for more information.",
      "tags": [
        [
          "since",
          "v0.1.100"
        ]
      ],
      "start": 290,
      "length": 3,
      "target": "log",
      "line": 22,
      "character": 14
    },
    {
      "type": "hover",
      "text": "(property) msg: string",
      "start": 299,
      "length": 3,
      "target": "msg",
      "line": 22,
      "character": 23
    },
    {
      "type": "hover",
      "text": "(property) button: ButtonHTMLAttributes & ReservedProps",
      "start": 341,
      "length": 6,
      "target": "button",
      "line": 29,
      "character": 3
    },
    {
      "type": "hover",
      "text": "(property) onClick?: ((payload: MouseEvent) => void) | undefined",
      "start": 349,
      "length": 5,
      "target": "click",
      "line": 29,
      "character": 11
    },
    {
      "type": "query",
      "text": "(property) onClick?: ((payload: MouseEvent) => void) | undefined",
      "start": 349,
      "length": 5,
      "target": "click",
      "line": 29,
      "character": 11
    },
    {
      "type": "hover",
      "text": "const count: Ref<number, number>",
      "start": 356,
      "length": 5,
      "target": "count",
      "line": 29,
      "character": 18
    },
    {
      "type": "hover",
      "text": "(property) msg: string",
      "start": 368,
      "length": 3,
      "target": "msg",
      "line": 29,
      "character": 30
    },
    {
      "type": "hover",
      "text": "const count: Ref<number, number>",
      "start": 388,
      "length": 5,
      "target": "count",
      "line": 29,
      "character": 50
    },
    {
      "type": "hover",
      "text": "(property) button: ButtonHTMLAttributes & ReservedProps",
      "start": 398,
      "length": 6,
      "target": "button",
      "line": 29,
      "character": 60
    }
  ],
  "flags": []
}