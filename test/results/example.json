{
  "code": "import { ref, computed, defineComponent } from 'vue'\n\n\n\n\n\nconst count = ref(0)\n\nconst double = computed(() => count.value * 2)\n\nexport default defineComponent({\n  name: 'HelloWorld',\n  data() {\n    return {\n      msg: 'Hello!'\n    }\n  },\n  methods: {\n    greet() {\n      console.log(this.msg)\n    }\n  },\n  render(){\n    return (\n      <button onClick={()=>count.value++}>{ this.msg } Count is: { count }</button>\n    )\n  }\n})\n",
  "nodes": [
    {
      "type": "hover",
      "text": "(alias) function ref<T>(value: T): [T] extends [Ref] ? IfAny<T, Ref<T>, T> : Ref<UnwrapRef<T>, UnwrapRef<T> | T> (+1 overload)\nimport ref",
      "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
      "tags": [
        [
          "param",
          "value - The object to wrap in the ref."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#ref}"
        ]
      ],
      "start": 9,
      "length": 3,
      "target": "ref",
      "line": 0,
      "character": 9
    },
    {
      "type": "hover",
      "text": "(alias) const computed: {\n    <T>(getter: ComputedGetter<T>, debugOptions?: DebuggerOptions): ComputedRef<T>;\n    <T, S = T>(options: WritableComputedOptions<T, S>, debugOptions?: DebuggerOptions): WritableComputedRef<T, S>;\n}\nimport computed",
      "start": 14,
      "length": 8,
      "target": "computed",
      "line": 0,
      "character": 14
    },
    {
      "type": "query",
      "text": "(alias) const computed: {\n    <T>(getter: ComputedGetter<T>, debugOptions?: DebuggerOptions): ComputedRef<T>;\n    <T, S = T>(options: WritableComputedOptions<T, S>, debugOptions?: DebuggerOptions): WritableComputedRef<T, S>;\n}\nimport computed",
      "start": 14,
      "length": 8,
      "target": "computed",
      "line": 0,
      "character": 14
    },
    {
      "type": "hover",
      "text": "(alias) function defineComponent<Props extends Record<string, any>, E extends EmitsOptions = {}, EE extends string = string, S extends SlotsType = {}>(setup: (props: Props, ctx: SetupContext<E, S>) => RenderFunction | Promise<RenderFunction>, options?: Pick<ComponentOptions, \"name\" | \"inheritAttrs\"> & {\n    props?: (keyof Props)[];\n    emits?: E | EE[];\n    slots?: S;\n}): DefineSetupFnComponent<Props, E, S> (+2 overloads)\nimport defineComponent",
      "start": 24,
      "length": 15,
      "target": "defineComponent",
      "line": 0,
      "character": 24
    },
    {
      "type": "hover",
      "text": "const count: Ref<number, number>",
      "start": 64,
      "length": 5,
      "target": "count",
      "line": 6,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(alias) ref<number>(value: number): Ref<number, number> (+1 overload)\nimport ref",
      "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
      "tags": [
        [
          "param",
          "value - The object to wrap in the ref."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#ref}"
        ]
      ],
      "start": 72,
      "length": 3,
      "target": "ref",
      "line": 6,
      "character": 14
    },
    {
      "type": "hover",
      "text": "const double: ComputedRef<number>",
      "start": 86,
      "length": 6,
      "target": "double",
      "line": 8,
      "character": 6
    },
    {
      "type": "query",
      "text": "const double: ComputedRef<number>",
      "start": 86,
      "length": 6,
      "target": "double",
      "line": 8,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(alias) computed<number>(getter: ComputedGetter<number>, debugOptions?: DebuggerOptions): ComputedRef<number> (+1 overload)\nimport computed",
      "docs": "Takes a getter function and returns a readonly reactive ref object for the\nreturned value from the getter. It can also take an object with get and set\nfunctions to create a writable ref object.",
      "tags": [
        [
          "example",
          "```js\n// Creating a readonly computed ref:\nconst count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\nconsole.log(plusOne.value) // 2\nplusOne.value++ // error\n```\n\n```js\n// Creating a writable computed ref:\nconst count = ref(1)\nconst plusOne = computed({\n  get: () => count.value + 1,\n  set: (val) => {\n    count.value = val - 1\n  }\n})\n\nplusOne.value = 1\nconsole.log(count.value) // 0\n```"
        ],
        [
          "param",
          "getter - Function that produces the next value."
        ],
        [
          "param",
          "debugOptions - For debugging. See {@link https://vuejs.org/guide/extras/reactivity-in-depth.html#computed-debugging}."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#computed}"
        ]
      ],
      "start": 95,
      "length": 8,
      "target": "computed",
      "line": 8,
      "character": 15
    },
    {
      "type": "hover",
      "text": "const count: Ref<number, number>",
      "start": 110,
      "length": 5,
      "target": "count",
      "line": 8,
      "character": 30
    },
    {
      "type": "hover",
      "text": "(property) Ref<number, number>.value: number",
      "start": 116,
      "length": 5,
      "target": "value",
      "line": 8,
      "character": 36
    },
    {
      "type": "hover",
      "text": "(alias) defineComponent<unknown, ComponentObjectPropsOptions<Data>, string, {}, {}, string, {\n    msg: string;\n}, {}, {}, {\n    greet(): void;\n}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, {}, {}, {}, string, ComponentProvideOptions, {}, {}, {}, any>(options: {\n    ...;\n} & ... 1 more ... & ThisType<...>): DefineComponent<...> (+2 overloads)\nimport defineComponent",
      "start": 143,
      "length": 15,
      "target": "defineComponent",
      "line": 10,
      "character": 15
    },
    {
      "type": "hover",
      "text": "(property) ComponentOptionsBase<Props, RawBindings, D, C extends ComputedOptions, M extends MethodOptions, Mixin extends ComponentOptionsMixin, Extends extends ComponentOptionsMixin, E extends EmitsOptions, EE extends string = string, Defaults = {}, I extends ComponentInjectOptions = {}, II extends string = string, S extends SlotsType = {}, LC extends Record<string, Component> = {}, Directives extends Record<string, Directive> = {}, Exposed extends string = string, Provide extends ComponentProvideOptions = ComponentProvideOptions>.name?: string | undefined",
      "start": 163,
      "length": 4,
      "target": "name",
      "line": 11,
      "character": 2
    },
    {
      "type": "hover",
      "text": "(property) LegacyOptions<ToResolvedProps<{}, {}>, { msg: string; }, {}, { greet(): void; }, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, ComponentProvideOptions>.data?: ((this: CreateComponentPublicInstanceWithMixins<...>, vm: CreateComponentPublicInstanceWithMixins<ToResolvedProps<{}, {}>, {}, {}, {}, MethodOptions, ComponentOptionsMixin, ComponentOptionsMixin, ... 18 more ..., {}>) => {\n    ...;\n}) | undefined",
      "start": 185,
      "length": 4,
      "target": "data",
      "line": 12,
      "character": 2
    },
    {
      "type": "hover",
      "text": "(property) msg: string",
      "start": 213,
      "length": 3,
      "target": "msg",
      "line": 14,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(property) LegacyOptions<ToResolvedProps<{}, {}>, { msg: string; }, {}, { greet(): void; }, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, ComponentProvideOptions>.methods?: {\n    greet(): void;\n} | undefined",
      "start": 240,
      "length": 7,
      "target": "methods",
      "line": 17,
      "character": 2
    },
    {
      "type": "hover",
      "text": "(method) greet(): void",
      "start": 255,
      "length": 5,
      "target": "greet",
      "line": 18,
      "character": 4
    },
    {
      "type": "hover",
      "text": "var console: Console",
      "start": 271,
      "length": 7,
      "target": "console",
      "line": 19,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(method) Console.log(...data: any[]): void",
      "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)",
      "start": 279,
      "length": 3,
      "target": "log",
      "line": 19,
      "character": 14
    },
    {
      "type": "hover",
      "text": "(property) msg: string",
      "start": 288,
      "length": 3,
      "target": "msg",
      "line": 19,
      "character": 23
    },
    {
      "type": "hover",
      "text": "(property) ComponentOptionsBase<Props, RawBindings, D, C extends ComputedOptions, M extends MethodOptions, Mixin extends ComponentOptionsMixin, Extends extends ComponentOptionsMixin, E extends EmitsOptions, EE extends string = string, Defaults = {}, I extends ComponentInjectOptions = {}, II extends string = string, S extends SlotsType = {}, LC extends Record<string, Component> = {}, Directives extends Record<string, Directive> = {}, Exposed extends string = string, Provide extends ComponentProvideOptions = ComponentProvideOptions>.render?: Function | undefined",
      "start": 306,
      "length": 6,
      "target": "render",
      "line": 22,
      "character": 2
    },
    {
      "type": "hover",
      "text": "(property) button: ButtonHTMLAttributes & ReservedProps",
      "start": 336,
      "length": 6,
      "target": "button",
      "line": 24,
      "character": 7
    },
    {
      "type": "hover",
      "text": "(property) onClick?: ((payload: MouseEvent) => void) | undefined",
      "start": 343,
      "length": 7,
      "target": "onClick",
      "line": 24,
      "character": 14
    },
    {
      "type": "query",
      "text": "(property) onClick?: ((payload: MouseEvent) => void) | undefined",
      "start": 343,
      "length": 7,
      "target": "onClick",
      "line": 24,
      "character": 14
    },
    {
      "type": "hover",
      "text": "const count: Ref<number, number>",
      "start": 356,
      "length": 5,
      "target": "count",
      "line": 24,
      "character": 27
    },
    {
      "type": "hover",
      "text": "(property) Ref<number, number>.value: number",
      "start": 362,
      "length": 5,
      "target": "value",
      "line": 24,
      "character": 33
    },
    {
      "type": "hover",
      "text": "(property) msg: string",
      "start": 378,
      "length": 3,
      "target": "msg",
      "line": 24,
      "character": 49
    },
    {
      "type": "hover",
      "text": "const count: Ref<number, number>",
      "start": 396,
      "length": 5,
      "target": "count",
      "line": 24,
      "character": 67
    },
    {
      "type": "hover",
      "text": "(property) button: ButtonHTMLAttributes & ReservedProps",
      "start": 405,
      "length": 6,
      "target": "button",
      "line": 24,
      "character": 76
    }
  ],
  "flags": []
}