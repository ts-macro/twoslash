{
  "code": "import { ref } from \"vue\"\n\nconst count1 = ref(1)\n\nfunction count2() {\n  return count1.value + 1\n}\n\nexport default () => (\n  <div>\n    { count1 }\n  </div>\n)\n",
  "nodes": [
    {
      "type": "hover",
      "text": "(alias) function ref<T>(value: T): [T] extends [Ref] ? IfAny<T, Ref<T>, T> : Ref<UnwrapRef<T>, UnwrapRef<T> | T> (+1 overload)\nimport ref",
      "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
      "tags": [
        [
          "param",
          "value - The object to wrap in the ref."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#ref}"
        ]
      ],
      "start": 9,
      "length": 3,
      "target": "ref",
      "line": 0,
      "character": 9
    },
    {
      "type": "hover",
      "text": "const count1: Ref<number, number>",
      "start": 33,
      "length": 6,
      "target": "count1",
      "line": 2,
      "character": 6
    },
    {
      "type": "hover",
      "text": "(alias) ref<number>(value: number): Ref<number, number> (+1 overload)\nimport ref",
      "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
      "tags": [
        [
          "param",
          "value - The object to wrap in the ref."
        ],
        [
          "see",
          "{@link https://vuejs.org/api/reactivity-core.html#ref}"
        ]
      ],
      "start": 42,
      "length": 3,
      "target": "ref",
      "line": 2,
      "character": 15
    },
    {
      "type": "hover",
      "text": "function count2(): number",
      "start": 59,
      "length": 6,
      "target": "count2",
      "line": 4,
      "character": 9
    },
    {
      "type": "hover",
      "text": "const count1: Ref<number, number>",
      "start": 79,
      "length": 6,
      "target": "count1",
      "line": 5,
      "character": 9
    },
    {
      "type": "hover",
      "text": "(property) Ref<number, number>.value: number",
      "start": 86,
      "length": 5,
      "target": "value",
      "line": 5,
      "character": 16
    },
    {
      "type": "hover",
      "text": "(property) div: HTMLAttributes & ReservedProps",
      "start": 125,
      "length": 3,
      "target": "div",
      "line": 9,
      "character": 3
    },
    {
      "type": "hover",
      "text": "const count1: Ref<number, number>",
      "start": 136,
      "length": 6,
      "target": "count1",
      "line": 10,
      "character": 6
    },
    {
      "type": "completion",
      "start": 138,
      "length": 0,
      "completions": [
        {
          "name": "count1",
          "kind": "const",
          "kindModifiers": "",
          "sortText": "11"
        },
        {
          "name": "count2",
          "kind": "function",
          "kindModifiers": "",
          "sortText": "11"
        },
        {
          "name": "confirm",
          "kind": "function",
          "kindModifiers": "declare",
          "sortText": "15"
        },
        {
          "name": "console",
          "kind": "var",
          "kindModifiers": "declare",
          "sortText": "15"
        },
        {
          "name": "const",
          "kind": "keyword",
          "kindModifiers": "",
          "sortText": "15"
        },
        {
          "name": "continue",
          "kind": "keyword",
          "kindModifiers": "",
          "sortText": "15"
        }
      ],
      "completionsPrefix": "co",
      "line": 10,
      "character": 8
    },
    {
      "type": "hover",
      "text": "(property) div: HTMLAttributes & ReservedProps",
      "start": 149,
      "length": 3,
      "target": "div",
      "line": 11,
      "character": 4
    }
  ],
  "flags": []
}